{"version":3,"file":"plugin.cjs.production.min.js","sources":["../src/utils/index.ts","../src/shell/app.ts","../src/shell/app-shell.ts","../src/test/child.ts","../src/test/parent.ts","../src/test/shell/parent.ts","../src/test/shell/child1.ts","../src/service-invoke/master.ts"],"sourcesContent":["export interface Task {\r\n\r\n}\r\n\r\nexport enum SubAppLayout {\r\n    fullscreen = 'fullscreen',\r\n    embed = 'embed'\r\n}\r\n\r\nexport interface CommandData {\r\n    taskId?: string;\r\n    type: 'task' | 'message';\r\n    command: 'calender' | 'change-layout' | 'test' | 'send-setting';\r\n    data?: { layout: SubAppLayout }\r\n    /**是否广播 */\r\n    broadcast?: boolean;\r\n\r\n\r\n\r\n}\r\n\r\nexport abstract class EventListener {\r\n    listenerId!: string;\r\n    data: any;\r\n    abstract emit(data: any): void\r\n    abstract handle: Function;\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n/**消息中心状态 */\r\nexport enum EventBusStatus {\r\n    /**空闲 */\r\n    free = \"free\",\r\n    /** 处理中 */\r\n    process = \"process\"\r\n}\r\nexport let eventBus = new class EventBus {\r\n    status: EventBusStatus = EventBusStatus.free;\r\n    onStarTask?: (data: CommandData) => void\r\n    onFinishTask?: (data: CommandData) => void\r\n\r\n    processTasks: CommandData[] = [];\r\n    started!: boolean;\r\n    listeners: Map<string, EventListener[]> = new Map<string, EventListener[]>();\r\n    callbacks: Map<string, Function[]> = new Map<string, Function[]>();\r\n    constructor() {\r\n\r\n    }\r\n\r\n    callTask(event: CommandData, callback: Function) {\r\n        this.startTask(event);\r\n        event.taskId = event.type + Date.now();\r\n\r\n        let callbacks = this.callbacks.get(event.taskId);\r\n        if (callbacks) {\r\n            callbacks.push(callback);\r\n        } else {\r\n            this.callbacks.set(event.taskId, [callback]);\r\n        }\r\n        debugger;\r\n        window.parent.postMessage(event, '*');\r\n    }\r\n    callMessage(event: CommandData) {\r\n        window.parent.postMessage(event, '*');\r\n    }\r\n    startTask(command: CommandData) {\r\n        this.status = EventBusStatus.process;\r\n\r\n        this.processTasks.push(command);\r\n        if (this.onStarTask) {\r\n            this.onStarTask(command)\r\n        }\r\n\r\n    }\r\n\r\n    finishTask(taskId: string) {\r\n        let task = this.processTasks.find(t => t.taskId == taskId);\r\n\r\n        let taskIndex = this.processTasks.findIndex(t => t.taskId == taskId);\r\n        if (taskIndex > -1) this.processTasks.splice(taskIndex, 1);\r\n        if (this.onFinishTask) {\r\n            this.onFinishTask(task)\r\n        }\r\n        debugger;\r\n        if (this.processTasks.length == 0) {\r\n            this.status = EventBusStatus.free;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    startEventListener() {\r\n        if (this.started) return;\r\n        this.started = true;\r\n\r\n        window.addEventListener('message', (msg) => {\r\n            let taskId = msg.data.taskId;\r\n            let listenerId = msg.data.listenerId;\r\n            debugger;\r\n\r\n            /**处理任务 */\r\n            if (msg.data.command) {\r\n                let callbacks = this.listeners.get(msg.data.command);\r\n                if (callbacks) {\r\n                    debugger;\r\n                    callbacks.forEach(c => c.handle(msg.data));\r\n                    this.finishTask(taskId);\r\n                }\r\n                return\r\n\r\n            } else {\r\n                let callbacks = this.callbacks.get(taskId);\r\n                if (callbacks) {\r\n                    callbacks.forEach(c => c(msg.data));\r\n                }\r\n                this.finishTask(taskId)\r\n\r\n            }\r\n\r\n\r\n            if (listenerId) {\r\n                alert(listenerId)\r\n            }\r\n\r\n        })\r\n    }\r\n\r\n    // startCallback() {\r\n    //     window.addEventListener('message', (msg) => {\r\n    //         debugger;\r\n    //         let type = msg.data.command\r\n    //         let callbacks = this.callbacks.get(type);\r\n    //         if (callbacks) {\r\n    //             callbacks.forEach(c => c(msg.data))\r\n    //         }\r\n    //     })\r\n    // }\r\n\r\n\r\n    registerListener(eventType: string, listener: EventListener) {\r\n        let listeners = this.listeners.get(eventType);\r\n        if (listeners) {\r\n            listeners.push(listener);\r\n        } else {\r\n            this.listeners.set(eventType, [listener])\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\nexport class CalendarEvent extends EventListener {\r\n    listenerId: string = 'calendar' + Date.now();\r\n    data: any;\r\n    /**事件堆栈 */\r\n    eventStack: any[] = [];\r\n    emit(date: Date) {\r\n        // alert(JSON.stringify(this.data));\r\n        debugger;\r\n\r\n        window.frames[0].postMessage({ date, taskId: this.data.taskId }, '*');\r\n    }\r\n    handle: Function;\r\n    constructor(handle: Function) {\r\n        super();\r\n        this.handle = (data: CommandData) => { this.data = data; handle(data) };\r\n        if (!eventBus.started) {\r\n            eventBus.startEventListener();\r\n        }\r\n        debugger;\r\n        eventBus.registerListener('test', this);\r\n\r\n    }\r\n\r\n    startListen() {\r\n\r\n    }\r\n    // removeListener() {\r\n    //     let values = eventBus.callbacks\r\n    //     for (let key in values) {\r\n    //         let callbacks = eventBus.callbacks.get(key);\r\n    //         if (callbacks) {\r\n    //             let exsitListener = callbacks.find(c => c.listenerId == this.listenerId);\r\n    //             if (exsitListener) {\r\n    //                 let indexOf = callbacks.indexOf(exsitListener);\r\n    //                 if (indexOf > -1) { callbacks.splice(indexOf, 1) };\r\n    //             }\r\n    //         }\r\n    //     }\r\n\r\n\r\n    // }\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\nexport class SettingEvent extends EventListener {\r\n    listenerId: string = 'calendar' + Date.now();\r\n    data: any;\r\n    /**事件堆栈 */\r\n    eventStack: any[] = [];\r\n    emit(date: Date) {\r\n        // alert(JSON.stringify(this.data));\r\n        debugger;\r\n\r\n        window.frames[0].postMessage({ date, taskId: this.data.taskId }, '*');\r\n    }\r\n    handle: Function;\r\n    constructor(handle: Function) {\r\n        super();\r\n        this.handle = (data: CommandData) => { this.data = data; handle(data) };\r\n        if (!eventBus.started) {\r\n            eventBus.startEventListener();\r\n        }\r\n        debugger;\r\n        eventBus.registerListener('send-setting', this);\r\n\r\n    }\r\n\r\n    startListen() {\r\n\r\n    }\r\n    // removeListener() {\r\n    //     let values = eventBus.callbacks\r\n    //     for (let key in values) {\r\n    //         let callbacks = eventBus.callbacks.get(key);\r\n    //         if (callbacks) {\r\n    //             let exsitListener = callbacks.find(c => c.listenerId == this.listenerId);\r\n    //             if (exsitListener) {\r\n    //                 let indexOf = callbacks.indexOf(exsitListener);\r\n    //                 if (indexOf > -1) { callbacks.splice(indexOf, 1) };\r\n    //             }\r\n    //         }\r\n    //     }\r\n\r\n\r\n    // }\r\n\r\n\r\n\r\n}\r\n\r\n","export enum AppLoadStatus {\r\n    Loading = 'Loading',\r\n    Finished = 'Finished',\r\n    Waiting = 'Waiting'\r\n}\r\nexport interface App {\r\n    /**应用的唯一id */\r\n    id: string;\r\n    title?: string;\r\n    /** 地址 */\r\n\r\n    url: string;\r\n    icon?: string;\r\n    description?: string;\r\n    /**应用的加载方式*/\r\n    loadMethod: LoadMethod;\r\n    isMaster?: boolean;\r\n    loadStatus?: AppLoadStatus\r\n\r\n\r\n}\r\nexport enum LoadMethod {\r\n    /**并行加载,加载优先级最高,使用预渲染与主应用同时加载,不易同时过多应用采用进行并行加载,虽然没有网络并发数量限制,但是流量压力过大 */\r\n    Parallel = 'Parallel',\r\n    /** 预加载  采用预加载  在主应用加载完成后，才会进行加载内容 */\r\n    Preload = 'Preload',\r\n    /** 懒加载  除非主动激活,或是调用其服务/命令  才会进行加载 */\r\n    LazyLoad = 'LazyLoad',\r\n    /** 惰性加载 当应用加载的方式为惰性加载时,通常处于禁用状态 */\r\n    InertLoad = 'InertLoad'\r\n}","import { App, AppLoadStatus, LoadMethod } from \"./app\";\r\n\r\nexport enum ShellStatus {\r\n    LoadingApp = 'LoadingApp',\r\n    FinishLoading = 'FinishLoading'\r\n}\r\n\r\n/**\r\n *  应用管理 ,请在主应用中使用\r\n * \r\n * let appShell= new AppSchell();\r\n * 在ssr 中可以使用\r\n * appShell.addApps();\r\n * \r\n * \r\n*/\r\nexport class AppSchell {\r\n    status!: ShellStatus;\r\n    loading: boolean;\r\n    loadingApp: App\r\n    apps: App[] = [];\r\n    masterApp!: App;\r\n    onAppChange?: (apps: App[]) => void;\r\n\r\n    addApps(app_list: App[]) {\r\n        this.apps.push(...app_list);\r\n    }\r\n    /** 获取并行加载app */\r\n    loadParallel() {\r\n        let parallelApps = this.apps.filter(app => app.loadMethod == LoadMethod.Parallel);\r\n        return parallelApps;\r\n    }\r\n    /**\r\n     * 获取预加载app\r\n     */\r\n    getPreloadApps() {\r\n        let parallelApps = this.apps.filter(app => app.loadMethod == LoadMethod.Preload);\r\n        return parallelApps;\r\n    }\r\n\r\n    /**\r\n     * 获取惰性加载app\r\n     * @returns \r\n     */\r\n    getInertLoadApps() {\r\n        let parallelApps = this.apps.filter(app => app.loadMethod == LoadMethod.InertLoad);\r\n        return parallelApps;\r\n    }\r\n    /**获取懒加载apps */\r\n    getLazyLoadApps() {\r\n        let parallelApps = this.apps.filter(app => app.loadMethod == LoadMethod.LazyLoad);\r\n        return parallelApps;\r\n    }\r\n    /**\r\n     * 移除apps\r\n     * @param app_list \r\n     */\r\n    removeApps(...app_list: App[]) {\r\n        app_list.forEach(app => { let indexOf = this.apps.findIndex(a => a.id == app.id); if (indexOf > -1) this.apps.splice(indexOf, 1); })\r\n    }\r\n\r\n    setMasterStatus(appStatus: AppLoadStatus) {\r\n        this.getMasterApp().loadStatus = appStatus;\r\n    }\r\n    setAppStatus(appId: string, loadStatus: AppLoadStatus) {\r\n        let app = this.apps.find(app => app.id == appId);\r\n        if (app) {\r\n            app.loadStatus = loadStatus;\r\n        }\r\n        debugger;\r\n        if (this.onAppChange) {\r\n            this.onAppChange(this.apps);\r\n        }\r\n\r\n    }\r\n    getAppStatus(appId: string) {\r\n        let app = this.apps.find(app => app.id == appId);\r\n\r\n        return app ? app.loadStatus : null;\r\n    }\r\n    getMasterApp() {\r\n        return this.apps.find(app => app.isMaster);\r\n\r\n    }\r\n\r\n\r\n\r\n}","import { CommandData, eventBus } from '../utils/index';\r\n\r\nif ((window as any)['id'] == 'child') {\r\n    let resultEl = document.getElementById('result') as HTMLInputElement;\r\n\r\n    eventBus.startEventListener();\r\n    let taskNumEl = document.getElementById('taskNum') as HTMLInputElement;\r\n    let statusEl = document.getElementById('status') as HTMLInputElement;\r\n\r\n\r\n    eventBus.onStarTask = (data: CommandData) => { taskNumEl.value = eventBus.processTasks.length + ''; statusEl.innerText = eventBus.status }\r\n    eventBus.onFinishTask = (data: CommandData) => { taskNumEl.value = eventBus.processTasks.length + ''; statusEl.innerText = eventBus.status }\r\n    (window as any)['child'] = {\r\n        sendMessage: () => eventBus.callMessage({ command: 'test', type: 'message' }),\r\n        callTask: () => eventBus.callTask({ command: 'test', type: 'task' }, (data) => { debugger; resultEl.innerText = data.date; })\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n","import { CalendarEvent, CommandData, eventBus } from '../utils/index';\r\n// import { AppSchell } from '../shell/index';\r\n\r\nif ((window as any)['id'] == 'parent') {\r\n    let statusEl = document.getElementById('status');\r\n    let calenderEl = document.getElementById('calender') as HTMLInputElement;\r\n\r\n    eventBus.startEventListener();\r\n    eventBus.onStarTask = (cmd: CommandData) => { statusEl.innerText = eventBus.status; alert('开始任务' + cmd.command) };\r\n\r\n    // eventBus.startCallback();\r\n    let eventListen = new CalendarEvent((_: any) => { calenderEl.value = ''; calenderEl.placeholder = '显示日期' });\r\n    // eventBus.registerListener('test', (_: any) => alert('command'));\r\n    (window as any)['p'] = {\r\n        backData: () => eventListen.emit(new Date(calenderEl.value)),\r\n        removeListener: () => eventListen.data,\r\n        displayEventData: () => alert(JSON.stringify(eventListen.data))\r\n    }\r\n\r\n\r\n}\r\n\r\n","import { AppLoadStatus, LoadMethod } from '../../shell';\r\nimport { AppSchell } from '../../shell/app-shell';\r\nimport { CalendarEvent, eventBus, SettingEvent } from '../../utils';\r\n\r\nif (window.name == 'shell-parent') {\r\n    let status = document.getElementById('status');\r\n    let child1_status = document.getElementById('child1_status');\r\n    let app_num = document.getElementById('app_num');\r\n    let app_finish_num = document.getElementById('app_finish_num');\r\n    eventBus.startEventListener();\r\n    new SettingEvent((data: any) => alert(`setting`))\r\n\r\n\r\n    let child1 = 'child1';\r\n    let master = 'master';\r\n    let child2 = 'child2';\r\n\r\n    let appShell = new AppSchell();\r\n    appShell.addApps([\r\n        { id: 'master', url: 'http://localhost:3000/test/shell/parent.html', loadMethod: LoadMethod.Parallel, isMaster: true },\r\n        { id: 'child1', url: 'http://localhost:3000/test/shell/child1.html', loadMethod: LoadMethod.Preload },\r\n        { id: 'child2', url: 'http://localhost:3000/test/shell/child2.html', loadMethod: LoadMethod.LazyLoad },\r\n\r\n    ]);\r\n\r\n    appShell.onAppChange = (apps) => {\r\n        debugger;\r\n        child1_status.innerText = appShell.getAppStatus(child1);\r\n        app_num.innerText = appShell.apps.length + ''\r\n        app_finish_num.innerText = appShell.apps.filter(app => app.loadStatus == AppLoadStatus.Finished).length + ''\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    appShell.setMasterStatus(AppLoadStatus.Finished);\r\n    status.innerText = AppLoadStatus.Finished;\r\n\r\n    (window as any)['parent'] = {\r\n        onChildLoad: (appId) => { appShell.setAppStatus(appId, AppLoadStatus.Finished) },\r\n        addChild2: () => {\r\n            let iframe = document.createElement('iframe');\r\n            iframe.src = \"http://localhost:3000/test/shell/child2.html\";\r\n            iframe.onload = () => { alert(`child2 load`); appShell.setAppStatus(child2, AppLoadStatus.Finished) };\r\n            document.body.append(iframe);\r\n\r\n        }\r\n    }\r\n}\r\n\r\nexport let a = {\r\n    name: 'shell-parent'\r\n}","import { eventBus } from '../../utils/index';\r\nif (window.name == 'shell-child1') {\r\n    // alert('child1')\r\n    eventBus.startEventListener();\r\n    setTimeout(() => {\r\n        eventBus.callMessage({ command: 'send-setting', type: 'message' })\r\n\r\n    }, 1000);\r\n}   ","/**\r\n * hello 函数\r\n */\r\nexport function hello() {\r\n\r\n}\r\n/**\r\n * 主服务\r\n */\r\nexport let master = {\r\n    hello\r\n}\r\n\r\n"],"names":["SubAppLayout","EventBusStatus","EventListener","eventBus","constructor","this","free","Map","callTask","event","callback","startTask","taskId","type","Date","now","callbacks","get","push","set","window","parent","postMessage","callMessage","command","status","process","processTasks","onStarTask","finishTask","task","find","t","taskIndex","findIndex","splice","onFinishTask","length","startEventListener","started","addEventListener","msg","data","listenerId","listeners","forEach","c","handle","alert","registerListener","eventType","listener","CalendarEvent","super","emit","date","frames","startListen","SettingEvent","AppLoadStatus","LoadMethod","ShellStatus","AppSchell","addApps","app_list","apps","loadParallel","filter","app","loadMethod","Parallel","getPreloadApps","Preload","getInertLoadApps","InertLoad","getLazyLoadApps","LazyLoad","removeApps","indexOf","a","id","setMasterStatus","appStatus","getMasterApp","loadStatus","setAppStatus","appId","onAppChange","getAppStatus","isMaster","resultEl","document","getElementById","taskNumEl","statusEl","value","innerText","sendMessage","calenderEl","cmd","eventListen","_","placeholder","backData","removeListener","displayEventData","JSON","stringify","name","child1_status","app_num","app_finish_num","child1","child2","appShell","url","Finished","onChildLoad","addChild2","iframe","createElement","src","onload","body","append","setTimeout","hello"],"mappings":"iBAIYA,EA8BAC,yDA9BZ,SAAYD,GACRA,0BACAA,gBAFJ,CAAYA,IAAAA,OAiBZ,MAAsBE,IAatB,SAAYD,GAERA,cAEAA,oBAJJ,CAAYA,IAAAA,OAML,IAAIE,EAAW,IAAI,MAStBC,cARAC,YAAyBJ,EAAeK,KAIxCD,kBAA8B,GAE9BA,eAA0C,IAAIE,IAC9CF,eAAqC,IAAIE,IAKzCC,SAASC,EAAoBC,GACzBL,KAAKM,UAAUF,GACfA,EAAMG,OAASH,EAAMI,KAAOC,KAAKC,MAEjC,IAAIC,EAAYX,KAAKW,UAAUC,IAAIR,EAAMG,QACrCI,EACAA,EAAUE,KAAKR,GAEfL,KAAKW,UAAUG,IAAIV,EAAMG,OAAQ,CAACF,IAGtCU,OAAOC,OAAOC,YAAYb,EAAO,KAErCc,YAAYd,GACRW,OAAOC,OAAOC,YAAYb,EAAO,KAErCE,UAAUa,GACNnB,KAAKoB,OAASxB,EAAeyB,QAE7BrB,KAAKsB,aAAaT,KAAKM,GACnBnB,KAAKuB,YACLvB,KAAKuB,WAAWJ,GAKxBK,WAAWjB,GACP,IAAIkB,EAAOzB,KAAKsB,aAAaI,KAAKC,GAAKA,EAAEpB,QAAUA,GAE/CqB,EAAY5B,KAAKsB,aAAaO,UAAUF,GAAKA,EAAEpB,QAAUA,GACzDqB,GAAa,GAAG5B,KAAKsB,aAAaQ,OAAOF,EAAW,GACpD5B,KAAK+B,cACL/B,KAAK+B,aAAaN,GAGU,GAA5BzB,KAAKsB,aAAaU,SAClBhC,KAAKoB,OAASxB,EAAeK,MAMrCgC,qBACQjC,KAAKkC,UACTlC,KAAKkC,SAAU,EAEfnB,OAAOoB,iBAAiB,UAAYC,IAChC,IAAI7B,EAAS6B,EAAIC,KAAK9B,OAClB+B,EAAaF,EAAIC,KAAKC,WAI1B,GAAIF,EAAIC,KAAKlB,QAAb,CACI,IAAIR,EAAYX,KAAKuC,UAAU3B,IAAIwB,EAAIC,KAAKlB,SACxCR,IAEAA,EAAU6B,QAAQC,GAAKA,EAAEC,OAAON,EAAIC,OACpCrC,KAAKwB,WAAWjB,QALxB,CASO,CACH,IAAII,EAAYX,KAAKW,UAAUC,IAAIL,GAC/BI,GACAA,EAAU6B,QAAQC,GAAKA,EAAEL,EAAIC,OAEjCrC,KAAKwB,WAAWjB,GAKhB+B,GACAK,MAAML,OAkBlBM,iBAAiBC,EAAmBC,GAChC,IAAIP,EAAYvC,KAAKuC,UAAU3B,IAAIiC,GAC/BN,EACAA,EAAU1B,KAAKiC,GAEf9C,KAAKuC,UAAUzB,IAAI+B,EAAW,CAACC,YAW9BC,UAAsBlD,EAY/BE,YAAY2C,GACRM,QAZJhD,gBAAqB,WAAaS,KAAKC,MAGvCV,gBAAoB,GAUhBA,KAAK0C,OAAUL,IAAwBrC,KAAKqC,KAAOA,EAAMK,EAAOL,IAC3DvC,EAASoC,SACVpC,EAASmC,qBAGbnC,EAAS8C,iBAAiB,OAAQ5C,MAdtCiD,KAAKC,GAIDnC,OAAOoC,OAAO,GAAGlC,YAAY,CAAEiC,KAAAA,EAAM3C,OAAQP,KAAKqC,KAAK9B,QAAU,KAcrE6C,sBAyBSC,UAAqBxD,EAY9BE,YAAY2C,GACRM,QAZJhD,gBAAqB,WAAaS,KAAKC,MAGvCV,gBAAoB,GAUhBA,KAAK0C,OAAUL,IAAwBrC,KAAKqC,KAAOA,EAAMK,EAAOL,IAC3DvC,EAASoC,SACVpC,EAASmC,qBAGbnC,EAAS8C,iBAAiB,eAAgB5C,MAd9CiD,KAAKC,GAIDnC,OAAOoC,OAAO,GAAGlC,YAAY,CAAEiC,KAAAA,EAAM3C,OAAQP,KAAKqC,KAAK9B,QAAU,KAcrE6C,oBCtOQE,EAqBAC,ECnBAC,4IDFZ,SAAYF,GACRA,oBACAA,sBACAA,oBAHJ,CAAYA,IAAAA,OAqBZ,SAAYC,GAERA,sBAEAA,oBAEAA,sBAEAA,wBARJ,CAAYA,IAAAA,OCnBZ,SAAYC,GACRA,0BACAA,gCAFJ,CAAYA,IAAAA,OAcZ,MAAaC,EAAb1D,cAIIC,UAAc,GAId0D,QAAQC,GACJ3D,KAAK4D,KAAK/C,QAAQ8C,GAGtBE,eAEI,OADmB7D,KAAK4D,KAAKE,OAAOC,GAAOA,EAAIC,YAAcT,EAAWU,UAM5EC,iBAEI,OADmBlE,KAAK4D,KAAKE,OAAOC,GAAOA,EAAIC,YAAcT,EAAWY,SAQ5EC,mBAEI,OADmBpE,KAAK4D,KAAKE,OAAOC,GAAOA,EAAIC,YAAcT,EAAWc,WAI5EC,kBAEI,OADmBtE,KAAK4D,KAAKE,OAAOC,GAAOA,EAAIC,YAAcT,EAAWgB,UAO5EC,cAAcb,GACVA,EAASnB,QAAQuB,IAAS,IAAIU,EAAUzE,KAAK4D,KAAK/B,UAAU6C,GAAKA,EAAEC,IAAMZ,EAAIY,IAASF,GAAW,GAAGzE,KAAK4D,KAAK9B,OAAO2C,EAAS,KAGlIG,gBAAgBC,GACZ7E,KAAK8E,eAAeC,WAAaF,EAErCG,aAAaC,EAAeF,GACxB,IAAIhB,EAAM/D,KAAK4D,KAAKlC,KAAKqC,GAAOA,EAAIY,IAAMM,GACtClB,IACAA,EAAIgB,WAAaA,GAGjB/E,KAAKkF,aACLlF,KAAKkF,YAAYlF,KAAK4D,MAI9BuB,aAAaF,GACT,IAAIlB,EAAM/D,KAAK4D,KAAKlC,KAAKqC,GAAOA,EAAIY,IAAMM,GAE1C,OAAOlB,EAAMA,EAAIgB,WAAa,KAElCD,eACI,OAAO9E,KAAK4D,KAAKlC,KAAKqC,GAAOA,EAAIqB,mIC/EzC,GAA6B,SAAxBrE,OAAmB,GAAc,CAClC,IAAIsE,EAAWC,SAASC,eAAe,UAEvCzF,EAASmC,qBACT,IAAIuD,EAAYF,SAASC,eAAe,WACpCE,EAAWH,SAASC,eAAe,UAGvCzF,EAASyB,WAAcc,IAAwBmD,EAAUE,MAAQ5F,EAASwB,aAAaU,OAAS,GAAIyD,EAASE,UAAY7F,EAASsB,QAClItB,EAASiC,aAAgBM,IAAwBmD,EAAUE,MAAQ5F,EAASwB,aAAaU,OAAS,GAAIyD,EAASE,UAAY7F,EAASsB,QACnIL,OAAsB,MAAI,CACvB6E,YAAaA,IAAM9F,EAASoB,YAAY,CAAEC,QAAS,OAAQX,KAAM,YACjEL,SAAUA,IAAML,EAASK,SAAS,CAAEgB,QAAS,OAAQX,KAAM,QAAW6B,IAAqBgD,EAASM,UAAYtD,EAAKa,QCX7H,GAA6B,UAAxBnC,OAAmB,GAAe,CACnC,IAAI0E,EAAWH,SAASC,eAAe,UACnCM,EAAaP,SAASC,eAAe,YAEzCzF,EAASmC,qBACTnC,EAASyB,WAAcuE,IAAuBL,EAASE,UAAY7F,EAASsB,OAAQuB,MAAM,OAASmD,EAAI3E,UAGvG,IAAI4E,EAAc,IAAIhD,EAAeiD,IAAaH,EAAWH,MAAQ,GAAIG,EAAWI,YAAc,SAEjGlF,OAAkB,EAAI,CACnBmF,SAAUA,IAAMH,EAAY9C,KAAK,IAAIxC,KAAKoF,EAAWH,QACrDS,eAAgBA,IAAMJ,EAAY1D,KAClC+D,iBAAkBA,IAAMzD,MAAM0D,KAAKC,UAAUP,EAAY1D,QCZjE,GAAmB,gBAAftB,OAAOwF,KAAwB,CAC/B,IAAInF,EAASkE,SAASC,eAAe,UACjCiB,EAAgBlB,SAASC,eAAe,iBACxCkB,EAAUnB,SAASC,eAAe,WAClCmB,EAAiBpB,SAASC,eAAe,kBAC7CzF,EAASmC,qBACT,IAAIoB,EAAchB,GAAcM,kBAGhC,IAAIgE,EAAS,SAETC,EAAS,SAETC,EAAW,IAAIpD,EACnBoD,EAASnD,QAAQ,CACb,CAAEiB,GAAI,SAAUmC,IAAK,+CAAgD9C,WAAYT,EAAWU,SAAUmB,UAAU,GAChH,CAAET,GAAI,SAAUmC,IAAK,+CAAgD9C,WAAYT,EAAWY,SAC5F,CAAEQ,GAAI,SAAUmC,IAAK,+CAAgD9C,WAAYT,EAAWgB,YAIhGsC,EAAS3B,YAAetB,IAEpB4C,EAAcb,UAAYkB,EAAS1B,aAAawB,GAChDF,EAAQd,UAAYkB,EAASjD,KAAK5B,OAAS,GAC3C0E,EAAef,UAAYkB,EAASjD,KAAKE,OAAOC,GAAOA,EAAIgB,YAAczB,EAAcyD,UAAU/E,OAAS,IAQ9G6E,EAASjC,gBAAgBtB,EAAcyD,UACvC3F,EAAOuE,UAAYrC,EAAcyD,SAEhChG,OAAuB,OAAI,CACxBiG,YAAc/B,IAAY4B,EAAS7B,aAAaC,EAAO3B,EAAcyD,WACrEE,UAAWA,KACP,IAAIC,EAAS5B,SAAS6B,cAAc,UACpCD,EAAOE,IAAM,+CACbF,EAAOG,OAAS,KAAQ1E,qBAAsBkE,EAAS7B,aAAa4B,EAAQtD,EAAcyD,WAC1FzB,SAASgC,KAAKC,OAAOL,KC7Cd,gBAAfnG,OAAOwF,OAEPzG,EAASmC,qBACTuF,WAAW,KACP1H,EAASoB,YAAY,CAAEC,QAAS,eAAgBX,KAAM,aAEvD,mDCEa,CAChBiH"}